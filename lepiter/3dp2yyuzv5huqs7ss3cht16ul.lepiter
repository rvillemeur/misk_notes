{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-21T12:57:12.220109-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-21T12:57:12.220109-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "zSU5TauBDQC7WWFTC6EZOQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : ""
			},
			{
				"__type" : "exampleSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-11-30T22:05:19.802-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-11-30T22:05:19.802-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "kDZYrm6ODQCz2l8ND/MxwQ=="
				},
				"exampleSelector" : "eventExample",
				"previewHeight" : 200,
				"previewShowSelector" : "gtViewsFor:",
				"exampleBehaviorName" : "RdvNoteBlock",
				"codeExpanded" : true,
				"previewExpanded" : false,
				"noCode" : false
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-07-07T22:08:35.028-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-07-07T22:08:35.028-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "+AKQaqOfDQCA7dr5AWyuHw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "BlEventDispatcher -> announcer qui dispatch event\nBlSpaceEventListener >> handleEvent\n\nBlMouseEnterEvent\n\nThe announcement framwork is an event notification framework. Compared to \"traditional\" Smalltalk event systems in this new framework, an event is a real object rather than a symbol. Announcement is the superclass for events that someone might want to announce, such as a button click or an attribute change. Typically you create subclasses for your own events you want to announce.\n\nAn event someone might want to announce, such as a button click or an attribute change, is defined as a subclass of the abstract superclass Announcement. The subclass can have instance variables for additional information to pass along, such as a timestamp, or mouse coordinates at the time of the event, or the old value of the parameter that has changed. To signal the actual occurrence of an event, the \"announcer\" creates and configures an instance of an appropriate announcement, then broadcasts that instance. Objects subscribed to receive such broadcasts from the announcer receive a broadcast notification together with the instance. They can talk to the instance to find out any additional information about the event that has occurred.!\n\ndouble dispatch: Classe de base: BlEvent\nBlMouseEnterEvent >> sendTo: anObject\n\tanObject mouseEnterEvent: self\n    \nBlEventListener >> mouseEnterEvent: anEvent qui peut être spécialisé par une sous-classe.\n\n\nBlElement >> when: anEventClass do: aBlock\n\tself addEventHandlerOn: anEventClass do: aBlock\n    \nanEventClass peut être: BlMouseEnterEvent\ndo:  [ :anEvent | anEvent consumed: true.]\n\nBlElement >> addEventHandlerOn: anEventClass do: aBlock\n\tself addEventHandler: (BlEventHandler on: anEventClass do: aBlock)\n    \nBlElement >> addEventHandler: anEventHandler\n\tself eventDispatcher addEventHandler: anEventHandler\n\net aussi\nBlEventHandler: I am a scriptable event handler that allows users to assign a valuable action to the event of chosen type.\n```\nBlEventHandler\n\ton: BlClickEvent\n\tdo: [ :anEvent | self inform: 'Click!' ]\n```\n\n\nOSWindowMorphicEventHandler => gère les évènements au niveau OS Windows, qui fait le lien avec SDL2.\nBlMorphicEventHandler => convertit les évènements Morphic en évenements Bloc\nOSEvent -> Announcement coté Pharo\nBlEvent -> announcement coté Bloc/GToolkit\n\n\n\n----------------------------------\nUpdate font in GToolkit\nTBlTextStyleable compile: 'glamorousRegularFont\n    self fontName: ''Desyrel'''.\nTBlTextStyleable compile: 'glamorousRegularDefaultFont\n    self defaultFontName: ''Desyrel'''."
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2021-06-21T12:57:12.176109-04:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2021-06-21T12:57:16.937109-04:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "events"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "ed79384d-ab81-0d00-bb58-20a50ba11939"
	}
}