{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-07-22T19:58:33.558-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-07-22T19:58:33.558-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "4G6PWM+gDQC91qWMDxVTDQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Notes sur TDD - tir√© du livre TDD de Kent Beck\r\n\r\n\"Conservative montain climbers have a rule that of your four hands and feet, \r\nthree of them must be attached at any one time. Dynamic move where you let go\r\nof two at once are much more dangerous. The pure form of TDD, where you are never\r\nmore than one change away from a green bar, is like that three out of four rule\r\n\r\nIf I can think of a test that might not work, getting it to work is more \r\nimportant than releasing my code\"\r\n-------------------------------------------------------------------------------\r\n2 Steps:\r\n- Write a failing automated test before you write any code.\r\n- Remove duplication.\r\n\r\nThe full cycle is:\r\n1. Add a little test.\r\n2. Run all tests and fail.\r\n3. Make a little change.\r\n4. Run the tests and succeed.\r\n5. Refactor to remove duplication.\r\n\r\nThe general TDD cycle is:\r\n1. Write a test. Think about how you would like the operation in your mind to \r\nappear in your code. You are writing a story. Invent the interface you wish you \r\nhad. Include all the elements in the story that you imagine will be necessary to\r\ncalculate the right answers.\r\n\r\n2. Make it run. Quickly getting that bar green dominates everything else. If a \r\nclean, simple solution is obvious, type it in. If the clean, simple solution is\r\nobvious but it will take you a minute, make a note of it and get back to the \r\nmain problem, which is getting the bar green in seconds. This shift in aesthetics\r\nis hard for some experienced software engineers. They only know how to follow\r\nthe rules of good engineering. Quick green excuses all sins. But only for a moment.\r\n\r\n3. Make it right. Now that the system is behaving, put the sinful ways of the \r\nrecent past behind you. Step back onto the straight and narrow path of software\r\nrighteousness. Remove the duplication that you have introduced to get to quick green.\r\n-------------------------------------------------------------------------------\r\nPrinciples:\r\n- We don't start with object, we start with tests.\r\n- Start small or not at all.\r\n- When we write a test, we imagine the perfect interface for our operation. We \r\nare telling ourselves a story about how the operation will look from the outside.\r\n\r\nGradually generalized the working code, replacing constants with variables.\r\nAdd items to your todo list, rather than addressing them all at once.\r\n\r\nFor each desired change, make the change easy (warning: this may be hard), then\r\nmake the easy change.\r\n\r\n-------------------------------------------------------------------------------\r\nQuestion to ask:\r\n* Where should you start building a system ? With stories you want to be able to \r\ntell about the finished system.\r\n* Where should you start writing a bit of functionnality ? With the test you want\r\nto pass with the finished code.\r\n* Where should you start writing a test ? With the assert that will pass when it \r\nis done.\r\n\r\nThere is a flip side ot taking breaks. Sometimes, when faced with a tough problem\r\nwhat you need to do is press on, push through it. However, programming culture is\r\nso infected with macho, \"I'll ruin my health, alienate my family, and kill myself\r\nif necessary\" spirit that I don't feel compelled to give any advice along these lines.\r\nIf you find yourself caffeine-addicted and making no progress whatsoever, perhaps\r\nyou shouldn't take quite so many breaks. In the meantime, take a walk.\r\n\r\nGet Cheap/slow/old machines for individual email and surfing, and the hottest \r\npossible machines for shared development.\r\n-------------------------------------------------------------------------------\r\n\r\nStarter test:\r\nWhich test should you start with ? Start by testing a variant of an operation that\r\ndoesn't do anything. The first question you have to ask with a new operation is\r\n\"where does it belong ?\" Until you've finished this question, you don't know\r\nwhat to type for the test.\r\n\r\nLearning test:\r\nAs alternative is to notice that we are about to use a new method of a new class.\r\nInstead of just using it, we write a little test that verifies that the API works\r\nas expected.\r\n\r\nRegression test:\r\nWhat's the first thing you do when a defect is reported ? Write the smallest possible\r\ntest that fails, and that once it runs, the defect will be repaired.\r\n\r\nMock Object:\r\nHow do you test an object that relies on an expensive or complicated resource ?\r\nCreate a fake version of the resource that answers constants.\r\n\r\nBroken test:\r\nHow do you leave a programming session when you're programming alone ? Leave the\r\nlast test broken. \r\n\r\nFake it:\r\nWhat is your first implementation once you have a broken test ? Return a constant.\r\nOnce you have the test running, gradually transform the constant into an \r\nexpression using variables.\r\n\r\nOne to Many:\r\nHow do you implement an operation that works with collections of objects ? \r\nImplement it without the collection first, then make it work with collections.\r\n\r\nAssertions:\r\nIf you are going to make the tests fully automated, every bit of human judgement\r\nhas to be taken out of the evaluation of the results. We need to push a button\r\nand have all the decisions necessary to verify the correct working of the code\r\nrun by the computer.\r\n\r\nFixture:\r\nHow do you create common objects needed by several tests ? Convert the local \r\nvariables in the tests into instance variables. Override setUp and initialize\r\nthose variables.\r\n\r\n\r\n\r\n"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-07-22T19:58:21.669-04:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-07-22T19:58:31.271-04:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "Test Driven Development"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "88d68e58-cfa0-0d00-bdd5-d5a20f15530d"
	}
}