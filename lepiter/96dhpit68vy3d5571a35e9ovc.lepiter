{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-07-22T20:26:56.628-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-07-22T20:26:56.628-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "YF8svs+gDQCrpENLDgkDmw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Au démarrage.\n\n--------------------------------------------------------------------------------\nSmalltalkImage -> session.\n--------------------------------------------------------------------------------\nSessionManager default startupList.\n-> ClassSessionHandler(WorldMorph)\nI handle a Session for a specific class, providing the API the class should implement.\nHandlers will be triggered by the SessionManager.\n\n\nstartup: isImageStarting\n\tself registeredClass startUp: isImageStarting\n--------------------------------------------------------------------------------\t\n-> UIManagerSessionHandler(UIManagerSessionHandler)\nI am a session handler that will initialize the UIManager during startup.\n\nThis session handler makes the assumption that the current UIManager is a \nstartup UI manager when its #startup: method gets called. Then, during startup \nhe will install a Morphic UI manager.\n\nstartup: isImageStarting\n\t\"Install the right UIManager\"\n\tUIManager default: UIManager forCurrentSystemConfiguration.\n=> renvoie MorphicUIManager\n\nUIManager class default: aUIManager\n\n\tDefault deactivate.\n\tDefault := aUIManager.\n\tDefault activate.\n\t\n=> MorphicUIManager >> activate\nactivate\n\tactiveTranscript \n\t\tifNil: [\n\t\t\tTranscript class == ThreadSafeTranscript ifFalse: [ \n\t\t\t\tThreadSafeTranscript install \n\t\t\t]\n\t\t]\t\t\n\t\tifNotNil: [ Transcript := activeTranscript ].\n\t\t\n\tSystemProgressMorph enable.\n--------------------------------------------------------------------------------\nMorphicUIManager qui lance la commande: UIManager default defer:  [ \n\t\tsuper activateWith: aCommandLine ]\n\t\t\nThe CommandLineArguments represents the arguments passed to the image.\nIn the following case,\n\n\t$PHARO_VM myImage.image --foo bar\n\t\n`CommandLineArguments default` contains {'--foo'. 'bar'}.\n\n--------------------------------------------------------------------------------\nQuestion: comment cette action s'est retrouvé dans la chaine d'execution \nde UI Manager. \nThisContext = [ super activateWith: aCommandLine ] in PharoCommandLineHandler class>>activateWith:\"\n--------------------------------------------------------------------------------\nDans la classe BasicCommandLineHandler >> activateSubCommand: aCommandLinehandler\n\t[ aCommandLinehandler activateWith: commandLine ] on: Exit do: [ :exit |\n\t\t^ self handleExit: exit for: aCommandLinehandler ].\n\t\"the return value of this method is used to check if the subcommand was successfull\"\n\t^ aCommandLinehandler\n--------------------------------------------------------------------------------"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-07-22T20:29:10.285-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-07-22T20:29:10.285-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "yHq+xs+gDQCrrme5DgkDmw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : ""
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-07-22T20:29:12.009-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-07-22T20:29:12.009-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "2GXIxs+gDQCrsMcKDgkDmw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "SmalltalkImage (singleton Smalltalk) >> initialize\r\n\tSessionManager default\r\n\t\tregisterSystemClassNamed: self name\r\n\r\nMy singleton is a central entry point to the system.\r\n\r\nIt has many roles and responsibilities (to be documented)\r\n\t- startup/shutdown image\r\n\t- source management\r\n\t- namespace access\r\n\t- tool access\r\n\t- platform access\r\n\t- VM information and parameters\t\r\n\t\r\nStartup\r\n-----------\r\nAt startup and shutdown the image execute the methods startUp: and shutdown: of registered classes (registered using addToStartUpList:, addToShutDownList:, ... methods and friends).\r\n\t\r\nStartup phases\r\nDuring the first stage of start up the UI manager, the default uimanager is switched to a specific non interactive ui manager (StartupUIManager). Note that this specific non interactive UIManager kills the system on any attempt to open windows and interaction. So be warned, don't use interaction in the first phase. \r\nThen all registered classes execute their start up procedures (which should not imply interactive behavior). \r\nAfter startup list is finished, any deferred startup actions are executed, which you can add using the method\r\naddDeferredStartupAction: method.  \r\n\r\n\r\nA new session starts when the image starts.\r\nA session stops when the image quits.\r\nThere is only one active session at a single point of time.\r\n\t\t\r\nSessionManager default startupList.\r\n-> UIManagerSessionHandler >> startup: isImageStarting\r\n\t\"Install the right UIManager\"\r\n\tUIManager default: UIManager forCurrentSystemConfiguration.\r\n\r\nUIManager class >> defaut:\r\ndefault: aUIManager\r\n\r\n\tDefault deactivate.\r\n\tDefault := aUIManager.\r\n\tDefault activate.\r\n\r\n\r\n\r\nBasicCommandLineHandler >> activate => can be initialized by PharoBootstrapInitialization\r\nBasicCommandLineHandler >> handleArgument: aString\r\nBasicCommandLineHandler >> handleSubcommand\r\n\t\"check if there is an active subcommand\"\r\n\t\r\n\t| handlers |\r\n\t\r\n\thandlers := self selectHandlers.\r\n\t\r\n\t\"If there is no handler, use myself\"\r\n\thandlers ifEmpty: [ ^ self ].\r\n\t\t\r\n\t^self activateSubCommand: handlers first .\r\n\r\nBasicCommandLineHandler >> activateSubCommand: aCommandLinehandler\r\n\t[ aCommandLinehandler activateWith: commandLine ] on: Exit do: [ :exit |\r\n\t\t^ self handleExit: exit for: aCommandLinehandler ].\r\n\t\"the return value of this method is used to check if the subcommand was successfull\"\r\n\t^ aCommandLinehandler\r\n\t\r\nPharoCommandLineHandler >> activateWith: aCommandLine\t\r\n\t\"Make sure that the PharoCommandLineHandler starts at the top of the stack in the main UI thread.\"\r\n\tUIManager default defer:  [ \r\n\t\tsuper activateWith: aCommandLine ]\r\n\r\nBasicCommandLineHandler -> PharoCommandLineHandler >> activate\r\n\tself isChangingPreferences\r\n\t\tifTrue: [ self changePreferences ]\r\n\t\tifFalse: [ self runPreferences ].\r\n\t^ super activate.\r\n\r\n-> PharoCommandLineHandler >> runPreferences\r\n\tSmalltalk at: #SystemSettingsPersistence ifPresent: [:persistence | \r\n\t\tpersistence resumeSystemSettings].\r\n\tSmalltalk at: #StartupPreferencesLoader ifPresent: [:loader |\r\n\t\tloader default loadFromDefaultLocations ].\r\n"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-07-22T20:26:46.441-04:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-07-22T20:26:54.66-04:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "startup and shutdown"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "28982bbe-cfa0-0d00-aba3-d5b40e09039b"
	}
}