{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-07-22T19:45:09.36-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-07-22T19:45:09.36-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "qEbZKM+gDQC9XU8QDxVTDQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "La représentation mémoire d'un objet se retrouve à 2 endroits:\n- représentation traditionnelle:\nVMMAker >> Interpreter >> Object Memory\n\n- représentation via Spur\nVMMaker >> SpurMemoryManager.\n\nTout est objet, donc classe comme méthode sont représenté sous forme d'objet.\n\nLes primitives de la VM sont initialisé par le message \"initializePrimitiveTable\"\nPour StackInterpreter, puis dérivé pour [[CogInterpreter]]\nVMMaker >> StackInterpreter.\n\nLes bytesCodes sont initialisés sous:\nVMMaker >> Interpreter >> [[StackInterpreter]] class >> initializeBytecodeTableForSistaV1\nou \nVMMaker >> Interpreter >> [[StackInterpreter]] class >> initializeBytecodeTableForNewspeakV4\n\nLe code est ensuite compilé par le compilateur dans l'image.\n\n\n\n\nUne méthode compilée, s'appelle\nDans l'image via kernel >> Methods >> CompiledMethods, qui appelle la primitive 79 primitiveNewMethod\n\nLe contexte d'appel est également appelé à partir de donnée générée dans l'image\n\n\n\ninitializePrimitiveTable\n\t\"This table generates a C function address table used in slowPrimitiveResponse along with dispatchFunctionPointerOn:in:\"\n\t\"self initializePrimitiveTable\"\n\n\t\"NOTE: The real limit here is 2047 because of the old method header layout but there is no point in going over the needed size\"\n\tMaxPrimitiveIndex := 575.\t\n\tMaxQuickPrimitiveIndex := 519.\n\tPrimNumberExternalCall := 117.\n\tPrimNumberFFICall := 120.\n\tPrimNumberDoExternalCall := 218.\n\tPrimitiveTable := Array new: MaxPrimitiveIndex + 1.\n\tself primitivesClass table: PrimitiveTable from: \n\t#(\t\"Integer Primitives (0-19)\"\n\t\t(0 0 \"a.k.a. primitiveFail but faster because primitiveFail won't even be called\")\n\t\t(1 primitiveAdd)\n\t\t(2 primitiveSubtract)\n\t\t(3 primitiveLessThan)\n\t\t(4 primitiveGreaterThan)\n\t\t(5 primitiveLessOrEqual)\n\t\t(6 primitiveGreaterOrEqual)\n\t\t(7 primitiveEqual)\n\t\t(8 primitiveNotEqual)\n\t\t(9 primitiveMultiply)\n\t\t(10 primitiveDivide)\n\t\t(11 primitiveMod)\n\t\t(12 primitiveDiv)\n\t\t(13 primitiveQuo)\n\t\t(14 primitiveBitAnd)\n\t\t(15 primitiveBitOr)\n\t\t(16 primitiveBitXor)\n\t\t(17 primitiveBitShift)\n\t\t(18 primitiveMakePoint)\n\t\t(19 primitiveFail)\t\t\t\t\t\"Guard primitive for simulation -- *must* fail\"\n\n\t\t\"LargeInteger Primitives (20-37)\"\n\t\t(20 primitiveRemLargeIntegers)\n\t\t(21 primitiveAddLargeIntegers)\n\t\t(22 primitiveSubtractLargeIntegers)\n\t\t(23 primitiveLessThanLargeIntegers)\n\t\t(24 primitiveGreaterThanLargeIntegers)\n\t\t(25 primitiveLessOrEqualLargeIntegers)\n\t\t(26 primitiveGreaterOrEqualLargeIntegers)\n\t\t(27 primitiveEqualLargeIntegers)\n\t\t(28 primitiveNotEqualLargeIntegers)\n\t\t(29 primitiveMultiplyLargeIntegers)\n\t\t(30 primitiveDivideLargeIntegers)\n\t\t(31 primitiveModLargeIntegers)\n\t\t(32 primitiveDivLargeIntegers)\n\t\t(33 primitiveQuoLargeIntegers)\n\t\t(34 primitiveBitAndLargeIntegers)\n\t\t(35 primitiveBitOrLargeIntegers)\n\t\t(36 primitiveBitXorLargeIntegers)\n\t\t(37 primitiveBitShiftLargeIntegers)\n\n\t\t\"Float Primitives (38-59)\"\n\t\t(38 primitiveFloatAt)\n\t\t(39 primitiveFloatAtPut)\n\t\t(40 primitiveAsFloat)\n\t\t(41 primitiveFloatAdd)\n\t\t(42 primitiveFloatSubtract)\n\t\t(43 primitiveFloatLessThan)\n\t\t(44 primitiveFloatGreaterThan)\n\t\t(45 primitiveFloatLessOrEqual)\n\t\t(46 primitiveFloatGreaterOrEqual)\n\t\t(47 primitiveFloatEqual)\n\t\t(48 primitiveFloatNotEqual)\n\t\t(49 primitiveFloatMultiply)\n\t\t(50 primitiveFloatDivide)\n\t\t(51 primitiveTruncated)\n\t\t(52 primitiveFractionalPart)\n\t\t(53 primitiveExponent)\n\t\t(54 primitiveTimesTwoPower)\n\t\t(55 primitiveSquareRoot)\n\t\t(56 primitiveSine)\n\t\t(57 primitiveArctan)\n\t\t(58 primitiveLogN)\n\t\t(59 primitiveExp)\n\n\t\t\"Subscript and Stream Primitives (60-67)\"\n\t\t(60 primitiveAt)\n\t\t(61 primitiveAtPut)\n\t\t(62 primitiveSize)\n\t\t(63 primitiveStringAt)\n\t\t(64 primitiveStringAtPut)\n\t\t\"The stream primitives no longer pay their way; normal Smalltalk code is faster.\"\n\t\t(65 0 \"a.k.a. primitiveFail but faster because primitiveFail won't even be called\")\"was primitiveNext\"\n\t\t(66 0 \"a.k.a. primitiveFail but faster because primitiveFail won't even be called\") \"was primitiveNextPut\"\n\t\t(67 0 \"a.k.a. primitiveFail but faster because primitiveFail won't even be called\") \"was primitiveAtEnd\"\n\n\t\t\"StorageManagement Primitives (68-79)\"\n\t\t(68 primitiveObjectAt)\n\t\t(69 primitiveObjectAtPut)\n\t\t(70 primitiveNew)\n\t\t(71 primitiveNewWithArg)\n\t\t(72 primitiveArrayBecomeOneWay)\t\"Blue Book: primitiveBecome\"\n\t\t(73 primitiveInstVarAt)\n\t\t(74 primitiveInstVarAtPut)\n\t\t(75 primitiveIdentityHash)\n\t\t(76 primitiveStoreStackp)\t\t\t\"Blue Book: primitiveAsObject\"\n\t\t(77 primitiveSomeInstance)\n\t\t(78 primitiveNextInstance)\n\t\t(79 primitiveNewMethod)\n\n\t\t\"Control Primitives (80-89)\"\n\t\t(80 primitiveFail)\t\t\t\t\t\"Blue Book: primitiveBlockCopy\"\n\t\t(81 primitiveFail)\t\t\t\t\t\"Blue Book: primitiveValue\"\n\t\t(82 primitiveFail)\t\t\t\t\t\"Blue Book: primitiveValueWithArgs\"\n\t\t(83 primitivePerform)\n\t\t(84 primitivePerformWithArgs)\n\t\t(85 primitiveSignal)\n\t\t(86 primitiveWait)\n\t\t(87 primitiveResume)\n\t\t(88 primitiveSuspend)\n\t\t(89 primitiveFlushCache)\n\n\t\t\"Input/Output Primitives (90-109)\"\n\t\t(90 primitiveMousePoint)\n\t\t(91 primitiveTestDisplayDepth)\t\t\t\"Blue Book: primitiveCursorLocPut\"\n\t\t(92 primitiveSetDisplayMode)\t\t\t\t\"Blue Book: primitiveCursorLink\"\n\t\t(93 primitiveInputSemaphore)\n\t\t(94 primitiveGetNextEvent)\t\t\t\t\"Blue Book: primitiveSampleInterval\"\n\t\t(95 primitiveInputWord)\n\t\t(96 primitiveFail)\t\"primitiveCopyBits\"\n\t\t(97 primitiveSnapshot)\n\t\t(98 primitiveStoreImageSegment)\n\t\t(99 primitiveLoadImageSegment)\n\t\t(100 primitivePerformInSuperclass)\t\t\"Blue Book: primitiveSignalAtTick\"\n\t\t(101 primitiveBeCursor)\n\t\t(102 primitiveBeDisplay)\n\t\t(103 primitiveScanCharacters)\n\t\t(104 primitiveFail)\t\"primitiveDrawLoop\"\n\t\t(105 primitiveStringReplace)\n\t\t(106 primitiveScreenSize)\n\t\t(107 primitiveMouseButtons)\n\t\t(108 primitiveKbdNext)\n\t\t(109 primitiveKbdPeek)\n\n\t\t\"System Primitives (110-119)\"\n\t\t(110 primitiveIdentical)\n\t\t(111 primitiveClass)\n\t\t(112 primitiveBytesLeft)\n\t\t(113 primitiveQuit)\n\t\t(114 primitiveExitToDebugger)\n\t\t(115 primitiveChangeClass)\t\t\t\t\t\"Blue Book: primitiveOopsLeft\"\n\t\t(116 primitiveFlushCacheByMethod)\n\t\t(117 primitiveExternalCall)\n\t\t(118 primitiveDoPrimitiveWithArgs)\n\t\t(119 primitiveFlushCacheBySelector)\n\t\t\t\"Squeak 2.2 and earlier use 119.  Squeak 2.3 and later use 116.\n\t\t\tBoth are supported for backward compatibility.\"\n\n\t\t\"Miscellaneous Primitives (120-127)\"\n\t\t(120 primitiveCalloutToFFI)\n\t\t(121 primitiveImageName)\n\t\t(122 primitiveNoop)\t\t\t\t\t\"Blue Book: primitiveImageVolume\"\n\t\t(123 primitiveFail)\t\"was primitiveValueUninterruptably\"\n\t\t(124 primitiveLowSpaceSemaphore)\n\t\t(125 primitiveSignalAtBytesLeft)\n\n\t\t\"Squeak Primitives Start Here\"\n\n\t\t\"Squeak Miscellaneous Primitives (128-149)\"\n\t\t(126 primitiveDeferDisplayUpdates)\n\t\t(127 primitiveShowDisplayRect)\n\t\t(128 primitiveArrayBecome)\n\t\t(129 primitiveSpecialObjectsOop)\n\t\t(130 primitiveFullGC)\n\t\t(131 primitiveIncrementalGC)\n\t\t(132 primitiveObjectPointsTo)\n\t\t(133 primitiveSetInterruptKey)\n\t\t(134 primitiveInterruptSemaphore)\n\t\t(135 primitiveMillisecondClock)\n\t\t(136 primitiveSignalAtMilliseconds)\n\t\t(137 primitiveSecondsClock)\n\t\t(138 primitiveSomeObject)\n\t\t(139 primitiveNextObject)\n\t\t(140 primitiveBeep)\n\t\t(141 primitiveClipboardText)\n\t\t(142 primitiveVMPath)\n\t\t(143 primitiveShortAt)\n\t\t(144 primitiveShortAtPut)\n\t\t(145 primitiveConstantFill)\n\t\t\"NOTE: When removing the obsolete indexed primitives,\n\t\tthe following two should go become #primitiveIntegerAt / atPut\"\n\t\t(146 primitiveFail)\t\"primitiveReadJoystick\"\n\t\t(147 primitiveFail)\t\"primitiveWarpBits\"\n\t\t(148 primitiveClone)\n\t\t(149 primitiveGetAttribute)\n\n\t\t\"Were File Primitives (150-169) - NO LONGER INDEXED\"\n\t\t(150 158 primitiveFail)\n\t\t(159 primitiveHashMultiply)\n\t\t(160 primitiveAdoptInstance)\n\t\t(161 primitiveSetOrHasIdentityHash)\n\t\t(162 primitiveFail)\t\t\t\"reserved for immutablity primitives\"\n\t\t(163 primitiveGetImmutability)\n\t\t(164 primitiveSetImmutability)\t\n\t\t(165 primitiveIntegerAt)\t\t\"hacked in here for now\"\n\t\t(166 primitiveIntegerAtPut)\n\t\t(167 primitiveYield)\n\t\t(168 primitiveCopyObject)\n\t\t(169 primitiveNotIdentical)\n\n\t\t\"SpurMemoryManager primitives\"\n\t\t(170 primitiveAsCharacter)\n\t\t(171 primitiveImmediateAsInteger)\n\t\t(172 primitiveFetchNextMourner)\n\t\t(173 primitiveSlotAt)\t\t\"c.f. (73 primitiveInstVarAt)\"\n\t\t(174 primitiveSlotAtPut)\t\"c.f. (74 primitiveInstVarAtPut)\"\n\t\t(175 primitiveBehaviorHash)\n\t\t(176 primitiveMaxIdentityHash)\n\t\t(177 primitiveAllInstances)\n\t\t(178 primitiveAllObjects)\n\t\t(179 primitiveFail) \"reserved for primitiveAllInstancesOfAny\"\n\t\t(180 primitiveGrowMemoryByAtLeast)\n\t\t(181 primitiveSizeInBytesOfInstance)\n\t\t(182 primitiveSizeInBytes)\n\t\t(183 primitiveIsPinned)\n\t\t(184 primitivePin)\n\n\t\t\"CriticalSection primitives\"\n\t\t(185 primitiveExitCriticalSection) \"similar to signal hence index = signal + 100\"\n\t\t(186 primitiveEnterCriticalSection) \"similar to wait hence index = wait + 100. was primitiveClosureValue\"\n\t\t(187 primitiveTestAndSetOwnershipOfCriticalSection) \"was primitiveClosureValueWithArgs\"\n\n\t\t\"Perform method directly\"\n\t\t(188 primitiveExecuteMethodArgsArray)\n\t\t(189 primitiveExecuteMethod)\n\n\t\t\"Sound Primitives (continued) - NO LONGER INDEXED\"\n\t\t(190 194 primitiveFail)\n\n\t\t\"Unwind primitives\"\n\t\t(195 primitiveFindNextUnwindContext)\n\t\t(196 primitiveTerminateTo)\n\t\t(197 primitiveFindHandlerContext)\n\t\t(198 0 \"a.k.a. primitiveMarkUnwindMethod\")\n\t\t(199 0 \"a.k.a. primitiveMarkHandlerMethod\")\n\n\t\t\"new closure primitives (were Networking primitives)\"\n\t\t(200 primitiveClosureCopyWithCopiedValues)\n\t\t(201 primitiveClosureValue) \"value\"\n\t\t(202 primitiveClosureValue) \"value:\"\n\t\t(203 primitiveClosureValue) \"value:value:\"\n\t\t(204 primitiveClosureValue) \"value:value:value:\"\n\t\t(205 primitiveClosureValue) \"value:value:value:value:\"\n\t\t(206 primitiveClosureValueWithArgs) \"valueWithArguments:\"\n\n\t\t(207 primitiveFullClosureValue) \"value[:value:value:value:] et al\"\n\t\t(208 primitiveFullClosureValueWithArgs) \"valueWithArguments:\"\n\t\t(209 primitiveFullClosureValueNoContextSwitch) \"valueNoContextSwitch[:value:] et al\"\n\n\t\t(210 primitiveContextAt)\n\t\t(211 primitiveContextAtPut)\n\t\t(212 primitiveContextSize)\n\t\t(213 primitiveContextXray)\n\t\t(214 primitiveVoidVMState)\n\t\t(215 primitiveFlushCacheByMethod) \"primitiveVoidVMStateForMethod in the CoInterpreter\"\n\t\t(216 217 primitiveFail)\t\"reserved for Cog primitives\"\n\t\t(218 primitiveDoNamedPrimitiveWithArgs)\n\t\t(219 primitiveFail)\t\t\"reserved for Cog primitives\"\n\n\t\t(220 primitiveFail)\t\t\"reserved for Cog primitives\"\n\n\t\t(221 primitiveClosureValueNoContextSwitch) \"valueNoContextSwitch\"\n\t\t(222 primitiveClosureValueNoContextSwitch) \"valueNoContextSwitch:\"\n\n\t\t(223 229 primitiveFail)\t\"reserved for Cog primitives (see 228 & 229 in CoInterpreterMT\"\n\n\t\t(230 primitiveRelinquishProcessor)\n\t\t(231 primitiveForceDisplayUpdate)\n\t\t(232 primitiveFormPrint)\n\t\t(233 primitiveSetFullScreen)\n\t\t(234 primitiveFail) \"primBitmapdecompressfromByteArrayat\"\n\t\t(235 primitiveFail) \"primStringcomparewithcollated\"\n\t\t(236 primitiveFail) \"primSampledSoundconvert8bitSignedFromto16Bit\"\n\t\t(237 primitiveFail) \"primBitmapcompresstoByteArray\"\n\t\t(238 239 primitiveFail) \"serial port primitives\"\n\t\t(240 primitiveUTCMicrosecondClock)\t\t\"was serial port primitive\"\n\t\t(241 primitiveLocalMicrosecondClock)\t\t\"was serial port primitive\"\n\t\t(242 primitiveSignalAtUTCMicroseconds)\n\t\t(243 primitiveUpdateTimezone) \"primStringtranslatefromtotable\"\n\t\t(244 primitiveUtcAndTimezoneOffset)\n\t\t(245 primitiveCoarseUTCMicrosecondClock) \"primStringindexOfAsciiinStringstartingAt\"\n\t\t(246 primitiveCoarseLocalMicrosecondClock) \"primStringfindSubstringinstartingAtmatchTable\"\n\t\t(247 primitiveSnapshotEmbedded)\n\t\t(248 primitiveFail) \"primitiveInvokeObjectAsMethod\"\n\t\t(249 primitiveArrayBecomeOneWayCopyHash)\n\n\t\t\"VM Implementor Primitives (250-255)\"\n\t\t(250 primitiveClearVMProfile)\n\t\t(251 primitiveControlVMProfiling \"primitiveStartVMProfiling\")\n\t\t(252 primitiveVMProfileSamplesInto \"primitiveStopVMProfiling\")\n\t\t(253 primitiveFail \"N.B. primitiveCollectCogCodeConstituents in CoInterpreter below\")\n\t\t(254 primitiveVMParameter)\n\t\t(255 primitiveFail) \"primitiveInstVarsPutFromStack. Never used except in Disney tests.\"\n\n\t\t\"Quick Push Const Methods\"\n\t\t(256 nil) \"primitivePushSelf\"\n\t\t(257 nil) \"primitivePushTrue\"\n\t\t(258 nil) \"primitivePushFalse\"\n\t\t(259 nil) \"primitivePushNil\"\n\t\t(260 nil) \"primitivePushMinusOne\"\n\t\t(261 nil) \"primitivePushZero\"\n\t\t(262 nil) \"primitivePushOne\"\n\t\t(263 nil) \"primitivePushTwo\"\n\n\t\t\"Quick Push Inst Var Methods\"\n\t\t(264 519 nil) \"primitiveLoadInstVar\"\n\n\t\t(520 primitiveFail)\n\t\t(521 529 primitiveFail) \"Reserved for Spur primitives\"\n\t\t(530 539 primitiveFail)\n\n\t\t(540 primitiveFail)\n\t\t(541 primitiveSmallFloatAdd)\n\t\t(542 primitiveSmallFloatSubtract)\n\t\t(543 primitiveSmallFloatLessThan)\n\t\t(544 primitiveSmallFloatGreaterThan)\n\t\t(545 primitiveSmallFloatLessOrEqual)\n\t\t(546 primitiveSmallFloatGreaterOrEqual)\n\t\t(547 primitiveSmallFloatEqual)\n\t\t(548 primitiveSmallFloatNotEqual)\n\t\t(549 primitiveSmallFloatMultiply)\n\t\t(550 primitiveSmallFloatDivide)\n\t\t(551 primitiveSmallFloatTruncated)\n\t\t(552 primitiveSmallFloatFractionalPart)\n\t\t(553 primitiveSmallFloatExponent)\n\t\t(554 primitiveSmallFloatTimesTwoPower)\n\t\t(555 primitiveSmallFloatSquareRoot)\n\t\t(556 primitiveSmallFloatSine)\n\t\t(557 primitiveSmallFloatArctan)\n\t\t(558 primitiveSmallFloatLogN)\n\t\t(559 primitiveSmallFloatExp)\n\n\t\t(560 569 primitiveFail)\n\n\t\t\"External primitive support primitives\"\n\t\t(570 primitiveFlushExternalPrimitives)\n\t\t(571 primitiveUnloadModule)\n\t\t(572 primitiveListBuiltinModule)\n\t\t(573 primitiveListExternalModule)\n\t\t(574 primitiveFail) \"reserved for addl. external support prims\"\n\n\t\t\"Unassigned Primitives\"\n\t\t(575 primitiveFail))\n"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-07-22T19:45:01.191-04:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-07-22T19:45:06.959-04:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "VM primitives"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "5883d828-cfa0-0d00-bd5c-cc660f15530d"
	}
}