{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:50:13.111907-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:50:31.344006-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "93wtIqnfDQCOaFOyATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "#Some context about Slang's ASTs"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:50:32.336661-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:50:38.026686-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "5NBSI6nfDQCOdDDIATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "As part of its transpilation pipeline Slang uses three different ASTs and understanding their responsibilities is key"
			},
			{
				"__type" : "pictureSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:52:41.483286-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:53:08.710518-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "/m8FK6nfDQCOiteSATlHPw=="
				},
				"url" : "attachments/3qv3sqx6f7jet9wformti3adn/3a7f1a72-fd02-47de-89af-3a93027750f4.jpg",
				"caption" : "",
				"previewHeight" : 300
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:53:30.729925-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:53:39.121081-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "bdT0LanfDQCOlZmEATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "**RbAST** (refactoring browser AST) is the exact representation of a Pharo project and, as its name indicates, it is used by the IDE for tasks such as refactoring, suggestions, etc."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:53:33.481852-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:53:44.488029-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "8dAeLqnfDQCOnBxfATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "**TAST** is an intermediate representation between Pharo and C, its nodes hold information that serves the C transpilation such as type system information, on top of that this AST also goes through several transformations such as renamings, inlinings, etc."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:50:39.58612-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:53:49.39319-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "O2/BI6nfDQCOfd4cATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "**CAST** is the C code representation, its sole responsibility is to be able to write C code."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:50:00.473727-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:54:00.596918-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "6qRsIanfDQCOZ+ytATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "#Development"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:54:09.567282-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:54:15.71077-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "KntFMKnfDQCO6DDSATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "##Locals type declarations"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:54:23.487235-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:54:35.099736-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "M+IZManfDQCO+xhzATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Slang has several pragmas (or annotations) for providing information needed for translations. When declaring a variable or an argument (a.k.a. a local) in Slang you must use the `var:type:` pragma so the generated C code can type the corresponding variable.\n\nIn this example, we are using var:type: to declare the type of the foo temporary variable"
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:54:47.763623-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:54:48.846159-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "IDCMMqnfDQCPDo+qATlHPw=="
				},
				"code" : "AClass >> aMethod\n| foo |\n<var: 'foo' type: 'char *'>"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:54:59.031261-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:55:21.825425-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "ojM4M6nfDQCPFwR9ATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "which would be translated to\n```text\nvoid someMethod() {\n    char *foo;\n}\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:55:30.554171-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:55:49.345387-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "ij0ZNanfDQCPZkdjATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "A validation was implemented so that **declaring a variable/argument** without adding its corresponding **type declarations** will throw an error thus avoiding a problem that would arise when trying to compile the generated C code."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:55:56.625104-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:55:58.361704-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "lwynNqnfDQCPl3kZATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "##Instance variables type declarations"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:56:23.86416-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:56:23.86416-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "KrBGOKnfDQCQDvYWATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Instance variables are the object's attributes, however, in C this isn't so obvious because classes can be translated in two very different manners"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:56:26.521244-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:56:26.521244-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "RTlvOKnfDQCQFa2FATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "1. Most classes are translated as a set of functions and they declare a set of global variables\n\n2. In some special cases some classes are marked as structs (this happens when they inherit the SlangStructType class), here instance variables are translated as members of the struct."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:56:28.512003-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:56:43.352954-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "P5qNOKnfDQCQHDauATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "This development was focused on structs, the way types are assigned to instance variables is by implementing a method (on the class side) called `instVarTypeDeclarationsDo` that matches instance variable names with their type."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:55:59.649874-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:56:36.043002-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "kTHVNqnfDQCPqhZdATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "A validation in the `SlangStructType` was implemented so that when emitting the struct code if any instance variable didn't have a corresponding type it fails, in a similar fashion to the last issue this prevents problems down the line."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:56:55.10966-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:56:57.641494-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "4WwjOqnfDQCQNi9xATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "##C Reserved Words"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:56:58.255409-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:57:11.401923-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "W3hTOqnfDQCQSdXpATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Due to Smalltalk and C having different keywords, some C keywords may be used as identifiers which can cause the compilation to fail (this issue had already been encountered, read issue #429)\n\nFor example, the following method would break when trying to compile C because `register` is a reserved word in C"
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:57:20.582443-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:57:21.829835-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "eyGoO6nfDQCQXOpgATlHPw=="
				},
				"code" : "AClass >> aMethod\n| register |"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:57:36.683105-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:57:39.378524-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "+cadPKnfDQCQZUFCATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "##C Conflicts Renamings"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:58:04.648929-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:58:04.648929-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "r4hIPqnfDQCQgvhpATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : " instead of throwing an error, automatically rename the identifier during the translation thus giving the developer complete freedom when naming."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:58:15.851278-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:58:15.851278-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Am/zPqnfDQCQk4dQATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "To implement this behavior I modified the method `CCodeGenerator>>emitCCodeOn:doInlining:do`Assertions: that orchestrates a huge part of the translation, it collects all the necessary TMethods (the TAST node that represents a method), does the inlinings and then emits the corresponding CAST and C code for the whole program. This worked great because I could perform the renames right before any code was emitted."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:58:22.025026-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:58:22.025026-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "AqxRP6nfDQCQmsVVATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The renamings by themselves were pretty straightforward as the idea of renaming a variable or a selector already existed, the only logic I had to add was renamings for instance variables."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:57:40.21946-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:58:22.029987-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "dcrTPKnfDQCQeJdFATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "After finishing with renaming C keywords conflicts I went and did the same for conflicting selectors, which would conflict if they had the same name but with different arguments. Take this example where we define aMethod and aMethod:"
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:58:38.006449-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:58:39.157126-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "LnpFQKnfDQCQpLwpATlHPw=="
				},
				"code" : "AClass >> aMethod\n   ^true\n\nAClass >> aMethod: anArgument\n   ^true"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:59:02.371253-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:59:02.371253-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Sk25QanfDQCQt5d3ATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "When translating them to functions both function names would be aMethod which would cause a conflict and fail when compiling and the same could be said for locals and other selectors."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T15:59:14.785183-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T16:00:05.747986-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "+bp2QqnfDQCRBEkkATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The final result for the renamings ended up like this\n- Identifier conflicting with keyword: Appends an `\"_1\"` to it.\n- Selector conflicting with other selectors: Append the number of arguments to the conflicting selectors, in the previous example the functions would end up like `aMethod0` and `aMethod1`.\n- Local variable conflicting with selectors: Precede it with an `\"l_\".`"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:02:09.73444-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:03:20.794263-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "jBVaVK7fDQCTLQQXATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "#Wrapping up validations"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:02:28.631038-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:03:02.442073-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Lm96Va7fDQCTT6PPATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "one small feature that I was eager to implement since starting the project was displaying these validations on the IDE so that the developer would save even more time compared to throwing an error during the transpilation.\n\nThe most natural way of displaying this information was as a linter rule, in this case, a new linter rule was added to check for redundant type declarations"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:03:02.953089-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:03:15.640781-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "limGV67fDQCTYpZGATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "##Implementation"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:03:34.074794-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:03:52.490779-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "wwRhWa7fDQCTif5EATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Linter rules in Pharo are implemented as classes, which must be a subclass of {{gtClass:ReAbstractRule}}, this provides you with a simple interface where a method receives a node and answers whether that RbAST node is valid or not"
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:04:09.946199-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:04:11.150914-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "i0WEW67fDQCT7BwHATlHPw=="
				},
				"code" : "ReSlangRedundantTypeDeclarationRule >> basicCheck: aNode [\n\n    ^ aNode isPragma and: [\n          aNode isTypeDefinition and: [\n              (aNode methodNode allDefinedVariables includes:\n                  (aNode argumentAt: #var:) value) not ] ]\n]"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:04:23.6657-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:04:24.747296-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "vrRVXK7fDQCT9YU+ATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "And that's it, this is how the linter rule shows up!"
			},
			{
				"__type" : "pictureSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:05:18.705289-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:05:49.310205-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "FpKdX67fDQCT/l3QATlHPw=="
				},
				"url" : "attachments/3qv3sqvbuw625dbv2rof275sa/22597a4e-4568-4a30-a8cb-bb2bc8a5b3a6.jpg",
				"caption" : "",
				"previewHeight" : 300
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:06:14.827134-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:06:16.322539-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "TTK+Yq7fDQCUA3izATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "#Type guided translations"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:06:17.196304-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:06:25.366323-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "SRMaY67fDQCUGyU5ATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "##The issue"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:06:38.965224-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:06:40.060187-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "/zdmZK7fDQCULj80ATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The last feature I worked on was based on a preexisting issue that had to do with the '&' operator in Pharo, to understand it let's use this code example"
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:06:49.485599-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:06:50.662104-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "kbsGZa7fDQCUN3eNATlHPw=="
				},
				"code" : "AClass >> aMethod\n    | result1 result2 |\n    result1 := self anOperation.\n    result2 := self anotherOperation.\n    ^result1 & result2"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:06:55.939065-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:07:33.396467-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "ATppZa7fDQCUQAYkATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "How should the last line be translated? Well it actually depends on the type, when `result1` and `result2` are booleans the `&` is a logical and which is translated as `&&` in C. On the other hand, if they are numbers then the `&` is a bit and, which is represented with the & symbol."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:07:51.883054-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:07:54.790893-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "2ty+aK7fDQCUe9rLATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "##Tapping into the translation pipeline"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:08:07.903812-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:08:17.168075-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "e1Ozaa7fDQCUjuRKATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "To get this behavior I had to modify the CAST generation, many operations are actually \"intercepted\" by this dictionary to add logic before the CAST. We can use it to call a method `generateCASTInferredAnd` which handles the type guided translation."
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:08:30.188841-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:08:31.34776-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "vUQHa67fDQCUoZgdATlHPw=="
				},
				"code" : "CCodeGenerator >> initializeCASTTranslationDictionary [\n    | pairs |\n\n    castTranslationDict := Dictionary new: 200.\n    pairs := #(\n    #&                #generateCASTInferredAnd:\n    #|                #forbiddenSelector:\n    #abs            #generateCASTAbs:\n    #and:            #generateCASTSequentialAnd:\n(...)"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:08:42.669625-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:08:46.999624-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "hs/Fa67fDQCUquW8ATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "##Dealing with string-based types"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:08:56.793853-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:08:58.01531-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "f1OdbK7fDQCUvc7+ATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The biggest issue for this implementation was dealing with types, because these are handled as strings, for example, take a look at the way a constant's type is inferred"
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:09:08.78159-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:09:09.864426-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "9iVUba7fDQCUxkVuATlHPw=="
				},
				"code" : "TConstantNode >> typeOrNilFrom: aCodeGenerator in: aTMethod [\n    | hb |\n    value isInteger\n        ifTrue:\n            [value positive\n                ifTrue:\n                    [hb := value highBit.\n                    hb < 32 ifTrue: [^#int].\n                    hb = 32 ifTrue: [^#'unsigned int'].\n                    hb = 64 ifTrue: [^#'unsigned long long'].\n                    ^#'long long']\n                ifFalse:\n                    [hb := value bitInvert highBit.\n                    hb < 32 ifTrue: [^#int].\n                    ^#'long long']].\n    value isFloat ifTrue: [^#double].\n    (#(nil true false) includes: value) ifTrue: [^#int].\n    (value isString and: [value isSymbol not]) ifTrue: [^#'char *'].\n    ^nil\n]"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:09:21.56603-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:10:06.07516-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "WFIXbq7fDQCUz/LbATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Not only are they all strings but this example displays the biggest issue, the boolean type is the same as the number type, which is `int`. The solution we came up with was using **objects that would wrap the string type** and also be able to answer if they are boolean or not. This worked great however it needed changing a bunch of logic around the type system.\n\nAn important note is that this only transforms ***some*** strings into objects, the co-living of these representations is painful and transitioning completely to objects is a must."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:10:19.402858-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T22:10:21.892599-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "l9WJca7fDQCVGesyATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "##Generating the CAST based on type"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T16:00:09.877177-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T16:00:50.866032-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "K4WKRanfDQCSGACTATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "[source 1](https://ivojawer.hashnode.dev/pharo-vm-transpiler-my-first-six-weeks)\n[source 2](https://ivojawer.hashnode.dev/pharo-vm-transpiler-wrapping-up?source=more_series_bottom_blogs)"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T16:00:52.380384-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T16:00:52.380384-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "oe5HSKnfDQCTKTeFATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : ""
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T16:00:20.906367-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-29T16:00:20.906367-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "iqdnRqnfDQCSt4DbATlHPw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : ""
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2024-09-29T15:50:13.099574-04:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2024-09-29T15:50:13.099574-04:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "Pharo VM Transpiler"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "a79a6b21-a9df-0d00-8e66-f5b30139473f"
	}
}