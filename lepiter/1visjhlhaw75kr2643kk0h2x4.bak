{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-07-07T22:12:04.156-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-09T14:26:15.668-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "AKFldqOfDQCBBIFeAWyuHw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "##introduction\r\nA pragma represents the occurrence of an annotation in a compiled method. A pragma is a literal message pattern that occurs between angle brackets at the start of a methodafter any temporaries\n\nBecause pragmas are messages, one can browse senders and implementors and perform them. One can query a method for its pragmas by sending it the pragmas message, which answers an Array of pragma instances, one for each pragma in the method. \n\nA pragma holds information about its defining class, method, its selector, as well as theinformation about the pragma keyword and its arguments.\n##Declaring a pragma : \r\n`<>` in method\r\n##working with pragma\n###Accessing method annotation: \r\n`pragma := (Color >> #gtInspectorColorIn:) pragmas first`\r\n\r\n```txt\n    => pragma arguments\n    => pragma keyword\n    => pragma selector\n    => pragma method\n    => pragma methodClass\r\n```\n###Querying pragmas: \r\n\r\n`Pragma allNamed: #alarm: in: Pragma`\nor:` Pragma allNamed: #gtExample in: BlBasicExamples`\n\n###get a pragma: \r\n`(BlBasicExamples >> #buttons) pragmas first`\n\n###Executing a pragma: \r\n` (AClass >> #test) pragmas first sendTo: Alarmer new`\n\r\n###PragmaCollector\na tool may need to adapt its internal state whenever a method contain-ing a particular pragma is added, removed or updated. This is the role of PragmaCollector:\n    `PragmaCollectorfilter: [:pragma | pragma keyword = ’primitive:’]) reset`\n    \n    \nPragma `<return: AClassName>`\nHow is it used ?"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-07-07T22:11:52.053-04:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-07-07T22:12:01.506-04:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "Pragmas"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "08f96476-a39f-0d00-8103-84a1016cae1f"
	}
}