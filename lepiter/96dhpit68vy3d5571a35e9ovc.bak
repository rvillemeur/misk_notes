{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-07-22T20:26:56.628-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-07-22T20:26:56.628-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "YF8svs+gDQCrpENLDgkDmw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Au démarrage.\n\n--------------------------------------------------------------------------------\nSmalltalkImage -> session.\n--------------------------------------------------------------------------------\nSessionManager default startupList.\n-> ClassSessionHandler(WorldMorph)\nI handle a Session for a specific class, providing the API the class should implement.\nHandlers will be triggered by the SessionManager.\n\n\nstartup: isImageStarting\n\tself registeredClass startUp: isImageStarting\n--------------------------------------------------------------------------------\t\n-> UIManagerSessionHandler(UIManagerSessionHandler)\nI am a session handler that will initialize the UIManager during startup.\n\nThis session handler makes the assumption that the current UIManager is a \nstartup UI manager when its #startup: method gets called. Then, during startup \nhe will install a Morphic UI manager.\n\nstartup: isImageStarting\n\t\"Install the right UIManager\"\n\tUIManager default: UIManager forCurrentSystemConfiguration.\n=> renvoie MorphicUIManager\n\nUIManager class default: aUIManager\n\n\tDefault deactivate.\n\tDefault := aUIManager.\n\tDefault activate.\n\t\n=> MorphicUIManager >> activate\nactivate\n\tactiveTranscript \n\t\tifNil: [\n\t\t\tTranscript class == ThreadSafeTranscript ifFalse: [ \n\t\t\t\tThreadSafeTranscript install \n\t\t\t]\n\t\t]\t\t\n\t\tifNotNil: [ Transcript := activeTranscript ].\n\t\t\n\tSystemProgressMorph enable.\n--------------------------------------------------------------------------------\nMorphicUIManager qui lance la commande: UIManager default defer:  [ \n\t\tsuper activateWith: aCommandLine ]\n\t\t\nThe CommandLineArguments represents the arguments passed to the image.\nIn the following case,\n\n\t$PHARO_VM myImage.image --foo bar\n\t\n`CommandLineArguments default` contains {'--foo'. 'bar'}.\n\n--------------------------------------------------------------------------------\nQuestion: comment cette action s'est retrouvé dans la chaine d'execution \nde UI Manager. \nThisContext = [ super activateWith: aCommandLine ] in PharoCommandLineHandler class>>activateWith:\"\n--------------------------------------------------------------------------------\nDans la classe BasicCommandLineHandler >> activateSubCommand: aCommandLinehandler\n\t[ aCommandLinehandler activateWith: commandLine ] on: Exit do: [ :exit |\n\t\t^ self handleExit: exit for: aCommandLinehandler ].\n\t\"the return value of this method is used to check if the subcommand was successfull\"\n\t^ aCommandLinehandler\n--------------------------------------------------------------------------------"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-07-22T20:26:46.441-04:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-07-22T20:26:54.66-04:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "startup and shutdown"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "28982bbe-cfa0-0d00-aba3-d5b40e09039b"
	}
}