{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:16:14.832-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:16:26.787-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "mHFmTBHeDQCM5ifCCnOewQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "#Spur memory manager\n\nSpurMemoryManager is a new object representation and garbage collector for the Cog VM's.  Spur is dedicated to Andreas Raab, friend and colleague.  I miss you, Andreas.  The goal for Spur is an overall improvement in Cog of -50% (twice as fast) for memory-intensive benchmarks."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:16:31.514-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:18:51.908-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "qP1kTRHeDQCNAOqCCnOewQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "##design objectives for the Spur memory manager are"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:18:44.088-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:18:48.722-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "2OhLVRHeDQCNe54kCnOewQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "####efficient object representation "
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:16:19.476-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:18:44.091-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "OE6tTBHeDQCM7FzICnOewQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "a la Eliot Miranda's VisualWorks 64-bit object representation that uses a 64-bit header, eliminating direct class references so that all objects refer to their classes indirectly.  Instead the header contains a constant class index, in a field smaller than a full pointer, These class indices are used in inline and first-level method caches, hence they do not have to be updated on GC (although they do have to be traced to be able to GC classes).  Classes are held in a sparse strong table.  The class table needs only to be indexed by an instance's class index in class hierarchy search, in the class primitive, and in tracing live objects in the heap.  The additional header space is allocated to a much expanded identity hash field, reducing hash efficiency problems in identity collections due to the extremely small (11 bit) hash field in the old Squeak GC.  The identity hash field is also a key element of the class index scheme.  A class's identity hash is its index into the class table, so to create an instance of a class one merely copies its identity hash into the class index field of the new instance.  This implies that when classes gain their identity hash they are entered into the class table and their identity hash is that of a previously unused index in the table.  It also implies that there is a maximum number of classes in the table.  The classIndex field could be as narrow as 16 bits (for efficient access); at least for a few years 64k classes should be enough.  But currently we make it the same as the identityHash field, 22 bits, or 4M values.  A class is entered into the class table in the following operations:\n\tbehaviorHash\n\tadoptInstance\n\tinstantiate\n\tbecome  (i.e. if an old class becomes a new class)\n\t\tif target class field's = to original's id hash\n\t\t   and replacement's id hash is zero\n\t\t\tenter replacement in class table\nbehaviorHash is a special version of identityHash that must be implemented in the image by any object that can function as a class (i.e. Behavior).\n\nThe object representaion must also be simple enough to allow more operations (especially array at:put: and object instantiation to be implemented by the JIT in machine code.  The current Squea object representtion with three different header sizes and two different size formats has discouraged this."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:19:00.351-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:19:06.335-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "GBREVhHeDQCNm3JKCnOewQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "###substantial commonality between 32-bit and 64-bit Implemetations"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:16:52.696-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:19:00.354-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "2DOoThHeDQCNH2TECnOewQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "While the 32-bit and 64-bit implementations are different (32-bits per slot vs 64-bits per slot), the fact that the object header is 64-bit and common between them and that object lengths are rounded up to 64-bits means that most of the memory manager code is common.  As of 9/18/2014:\n\n\tSpurMemoryManager selectors size 765\n\t(SpurMemoryManager selectors reject: [:s| (SpurMemoryManager >> s) messages asArray = #(subclassResponsibility)]) size 721\n\tSpur32BitMemoryManager selectors size 46\n\tSpur64BitMemoryManager selectors size 44 (two selectors remaining to be implemented)\n\nIn fact the object header looks like\n\n\t MSB:\t| 8: numSlots\t\t| (on a byte boundary)\n\t\t\t| 2 bits\t\t\t\t|\t(msb,lsb = {isMarked,?})\n\t\t\t| 22: identityHash\t| (on a word boundary)\n\t\t\t| 3 bits\t\t\t\t|\t(msb <-> lsb = {isGrey,isPinned,isRemembered}\n\t\t\t| 5: format\t\t\t| (on a byte boundary)\n\t\t\t| 2 bits\t\t\t\t|\t(msb,lsb = {isImmutable,?})\n\t\t\t| 22: classIndex\t\t| (on a word boundary) : LSB\n\t\t\t\t\t\nwith the two unused bits being next to the 22-bit classIndex and identityHash fields, allowing expansion there-of."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:19:13.871-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:19:16.632-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "sFwSVxHeDQCNtoujCnOewQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "###more immediate classes.  "
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:17:04.621-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:19:13.873-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "yC1eTxHeDQCNKBo2CnOewQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "An immediate Character class would speed up String accessing, especially for WideString, since no instantiation needs to be done on at:put: and no dereference need be done on at:.  In a 32-bit system tag checking is complex since it is thought important to retain 31-bit SmallIntegers.  Hence, as in current Squeak, the least significant bit set implies a SmallInteger, but Characters would likely have a tag pattern of xxx10.  Hence masking with 11 results in two values for SmallInteger, xxx01 and xxx11 (for details see In-line cache probe for immediates below).  30-bit characters are more than adequate for Unicode.  In a 64-bit system we can use the full three bits and usefully implement an immediate Float.  As in VisualWorks a functional representation takes three bits away from the exponent.  Rotating to put the sign bit in the least significant non-tag bit makes expanding and contracting the 8-bit exponent to the 11-bit IEEE double exponent easy and makes comparing negative and positive zero easier (an immediate Float is zero if its unsigned 64-bits are < 16).  So the representation looks like\n\t| 8 bit exponent | 52 bit mantissa | sign bit | 3 tag bits |\nFor details see \"60-bit immediate Floats\" below.\n"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:19:20.424-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:19:23.029-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "QF52VxHeDQCNzFKJCnOewQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "###efficient scavenging.  "
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:17:14.395-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:19:20.426-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "eFHzTxHeDQCNMWJYCnOewQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The current Squeak GC uses a slow pointer-reversal collector that writes every field in live objects three times in each collection, twice in the pointer-reversing heap traversal to mark live objects and once to update the pointer to its new location.  A scavenger writes every field of live data twice in each collection, once as it does a block copy of the object when copying to to space, once as it traverses the live pointers in the to space objects.  Of course the block copy is a relatively cheap write."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:19:25.568-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:19:28.089-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "GNjEVxHeDQCN4tZfCnOewQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "###lazy become.  "
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:17:25.706-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:19:25.569-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "KOWfUBHeDQCNOhJLCnOewQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Squeak uses direct pointers and Spur retains them.  The JIT's use of inline cacheing provides a cheap way of avoiding scanning the heap as part of a become (which is the simple approach to implementing become in a system with direct pointers).  A becomeForward: on a (set of) non-zero-sized object(s) turns the object into a \"forwarder\" whose first (non-header) word/slot is replaced by a pointer to the target of the becomeForward:.  The forwarder's class index is set to one that identifies fowarders (in fact classIndex 8), and, because it is a special, hidden class index, will always fail an inline cache test.  The inline cache failure code is then responsible for following the forwarding pointer chain (these are Iliffe vectors :) ) and resolving to the actual target.  The system has two main faults, that for a forwarded selector and that for a forwarded receiver.  For the former we want to unforward the current method and for the latter we want to unforward the current frame  See become read barrier below on how we deal with becomes on objects with named inst vars.  We insist that objects are at least 16 bytes in size (see 8-byte alignment below) so that there will always be space for a forwarding pointer.  Since none of the immediate classes can have non-immediate instances and since we allocate the immediate class indices corresponding to their tag pattern (in 32-bits, SmallInteger = 1 & 3, Character = 2; in 64-bits, SmallInteger = , Character = 2, SmallFloat = 4) we can use all the class indices from 0 to 7 for special uses, 0 = free, and e.g. 1 = isForwarded.  In general what's going on here is the implemention of a partial read barrier. Certain operations require a read barrier to ensure access of the target of the forwarder, not the forwarder itself.  Read barriers stink (have poor performance), so we must restrict the read barrier to as few places as possible.  See become read barrier below.  See http://www.mirandabanda.org/cogblog/2013/09/13/lazy-become-and-a-partial-read-barrier/ & http://www.mirandabanda.org/cogblog/2014/02/08/primitives-and-the-partial-read-barrier/.  But we avoid the cost of a read barrier in almost all cases by folding that forwarding check into a dynamic type check that is performwed anyway (sends) or a validation check (primitives checking their arguments).  In the case of a send, or a primitive, the failure handling code checks for forwarders, follow any if found, and if any are found, retries either the send or the primitive."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:19:33.955-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:19:36.516-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "6M1EWBHeDQCN+C8zCnOewQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "###pinning.  "
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:17:33.472-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:19:33.956-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "MGEWURHeDQCNQ3i7CnOewQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "To support a robust and easy-to-use FFI the memory manager must support temporary pinning where individual objects can be prevented from being moved by the GC for as long as required, either by being one of an in-progress FFI call's arguments, or by having pinning asserted by a primitive (allowing objects to be passed to external code that retains a reference to the object after returning).  Pinning probably implies a per-object \"is-pinned\" bit in the object header.  Objects are only pinnable in old space.  Pinning of new space objects is done via lazy become; i..e an object in new space is forwarded to a pinned copy of the object in old space."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:19:38.803-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:19:47.367-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "UMuOWBHeDQCODq96CnOewQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "###efficient old space collection.  "
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:17:42.84-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:19:38.805-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "CE+lURHeDQCNTOegCnOewQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "An incremental collector (a la Dijkstra's three colour algorithm) collects old space, e.g. via an amount of tracing being hung off scavenges and/or old space allocations at an adaptive rate that keeps full garbage collections to a minimum.  It may also be possible to provide cheap compaction by using lazy become: and best-fit (see free space/free list below). [This remains to be implemented]."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:19:51.067-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:19:54.102-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "kO1JWRHeDQCOTAPaCnOewQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "###8-byte alignment.  "
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:17:50.693-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:19:51.069-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "oCodUhHeDQCNVYYyCnOewQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "It is advantageous for the FFI, for floating-point access, for object movement and for 32/64-bit compatibility to keep object sizes in units of 8 bytes.  For the FFI, 8-byte alignment means passing objects to code that expects that requirement (such as modern x86 numeric processing instructions).  This implies that\n\t- the starts of all spaces are aligned on 8-byte boundaries\n\t- object allocation rounds up the requested size to a multiple of 8 bytes\n\t- the overflow size field is also 8 bytes"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:19:57.659-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:20:00.454-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "qH+uWRHeDQCOYmNyCnOewQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "###heap segmentation. "
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:17:57.953-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:19:57.661-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "APKLUhHeDQCNXkowCnOewQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "This allows incremental heap growth (the current Squeak VM requires a contiguous chunk of memory, meaning an unfortunate trade off between space for objects and space for external code), and returning memory to the OS after GC."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T08:27:16.725-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-09T09:16:14.836-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "CIFGnRDeDQCI3tgaCnOewQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "A detailed design sketch is included below after the instance variable descriptions.  The instance variable declarations can be checked for extra and missing declarations by making a literal array out of them and using\n\t(| ivs |\n\tivs := (#(becomeEffectsFlags\t\t<Integer> ...) piecesCutWhere: [:a :b| a = #>]) collect: [:ea| ea first].\n\t{ivs reject: [:iv| SpurMemoryManager instVarNames includes: iv].\n\t(SpurMemoryManager instVarNames reject: [:iv| ivs includes: iv]) sort})\nThe instance variable descriptions can be checked for extra and missing declarations by making a literal string out of them and using\n\t(| ivs |\n\tivs := ('becomeEffectsFlags...' piecesCutWhere: [:a :b| a = Character cr]) select: [:s| s notEmpty and: [s first isLetter]] thenCollect: [:ea| ea withoutTrailingBlanks].\n\t{ivs reject: [:iv| SpurMemoryManager instVarNames includes: iv].\n\t(SpurMemoryManager instVarNames reject: [:iv| ivs includes: iv]) sort})"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2024-09-09T08:27:16.71-04:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2024-09-09T08:27:16.71-04:00"
		}
	},
	"pageType" : {
		"__type" : "unnamedPage",
		"defaultTitle" : "Page"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "7046469d-10de-0d00-88dd-75e00a739ec1"
	}
}