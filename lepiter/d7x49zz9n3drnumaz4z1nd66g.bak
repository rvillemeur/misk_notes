{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-10-16T18:47:00.14-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-10-16T18:47:07.127-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "4EO1lQHhDQCnrbGvAzpN3w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "- ByteArray:     Array limited to byte elements (0-255)\r\n- WordArray:     Array limited to word elements (0-2^32)\r\n\r\n\r\n```st\r\n| b x y sum max |\r\nx := #[255 255 255].                                        \"constant byte array\"\r\nx := #(4 3 2 1).                                            \"literal array\"\r\nx := #((1 + 2) . 3).                                        \"literal array whose first element is an array of size 3\"\r\nx := { 5. 2 * 2 + 1 . 3+2 . 8 - 3 }.                        \"dynamic array\"\r\nx := Array with: 5 with: 4 with: 3 with: 2.                 \"create array with up to 4 elements\"\r\nx := Array new: 4.                                          \"allocate an array with specified size\"\r\nx                                                           \"set array elements\"\r\n   at: 1 put: 5;\r\n   at: 2 put: 4;\r\n   at: 3 put: 3;\r\n   at: 4 put: 2.\r\nb := x isEmpty.                                             \"test if array is empty\"\r\ny := x size.                                                \"array size\"\r\ny := x at: 4.                                               \"get array element at index\"\r\nb := x includes: 3.                                         \"test if element is in array\"\r\ny := x copyFrom: 2 to: 4.                                   \"subarray\"\r\ny := x indexOf: 3 ifAbsent: [0].                            \"first position of element within array\"\r\ny := x occurrencesOf: 3.                                    \"number of times object in collection\"\r\nx do: [:a | Transcript show: a printString; cr].            \"iterate over the array\"\r\ny := x select: [:a | a > 2].                                \"return collection of elements that pass test\"\r\ny := x reject: [:a | a < 2].                                \"return collection of elements that fail test\"\r\ny := x collect: [:a | a + a].                               \"transform each element for new collection\"\r\ny := x detect: [:a | a > 3] ifNone: [].                     \"return first element that passes test\"\r\nsum := 0. x do: [:a | sum := sum + a]. sum.                 \"sum array elements\"\r\nsum := 0. 1 to: (x size) do: [:a | sum := sum + (x at: a)]. \"sum array elements\"\r\nsum := x inject: 0 into: [:a :c | a + c].                   \"sum array elements\"\r\nmax := x inject: 0 into: [:a :c | (a > c)                   \"find max element in array\"\r\n   ifTrue: [a]\r\n   ifFalse: [c]].\r\ny := x shuffled.                                            \"randomly shuffle collection\"\r\ny := x asArray.                                             \"convert to array\"\r\ny := x asByteArray.                                         \"convert to byte array\"\r\ny := x asWordArray.                                         \"convert to word array\"\r\ny := x asOrderedCollection.                                 \"convert to ordered collection\"\r\ny := x asSortedCollection.                                  \"convert to sorted collection\"\r\ny := x asBag.                                               \"convert to bag collection\"\r\ny := x asSet.                                               \"convert to set collection\"\r\n```"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2024-10-16T18:47:00.102-04:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2024-10-16T18:47:00.102-04:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : " Array: Fixed length collection"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "88abb495-01e1-0d00-a7ac-505f033a4ddf"
	}
}